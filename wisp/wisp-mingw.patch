diff --git a/lib/startup.wisp b/lib/startup.wisp
index 8ca7f18..4200940 100755
--- a/lib/startup.wisp
+++ b/lib/startup.wisp
@@ -1,4 +1,4 @@
-(%define *require-path* '("lib" "."))
+(%define *require-path* (list (string-append (module-path) "/../share/wisp") "."))
 
 (%define *required* '())
 
diff --git a/src/arith.c b/src/arith.c
index affefeb..dc1a6fe 100755
--- a/src/arith.c
+++ b/src/arith.c
@@ -86,7 +86,7 @@ CELL func_abs(CELL frame)
     switch(GET_TYPE(FV0)) {
     case T_INT:
         {
-            const INT i = GET_INT(FV0);
+            const INT_PTR i = GET_INT(FV0);
             return (i < 0) ? make_int(-i) : FV0;
         }
 	case T_FLOAT:
@@ -104,12 +104,12 @@ CELL func_quotient(CELL frame)
 	if (! (INTP(FV0) && INTP(FV1)) ) {
 		return make_exception("expects <integer> arguments");
 	}
-	const INT a = GET_INT(FV0);
-	const INT b = GET_INT(FV1);
+	const INT_PTR a = GET_INT(FV0);
+	const INT_PTR b = GET_INT(FV1);
 	if (b == 0) {
 		return make_exception("division by zero");
 	}
-    const INT r = a / b;
+    const INT_PTR r = a / b;
     return make_int(r);
 }
 
@@ -122,12 +122,12 @@ CELL func_remainder(CELL frame)
 	if (! (INTP(FV0) && INTP(FV1)) ) {
 		return make_exception("expects <integer> arguments");
 	}
-	const INT a = GET_INT(FV0);
-	const INT b = GET_INT(FV1);
+	const INT_PTR a = GET_INT(FV0);
+	const INT_PTR b = GET_INT(FV1);
 	if (b == 0) {
 		return make_exception("division by zero");
 	}
-    const INT r = a % b;
+    const INT_PTR r = a % b;
     return make_int(r);
 }
 
@@ -136,12 +136,12 @@ CELL func_modulo(CELL frame)
 	if (! (INTP(FV0) && INTP(FV1)) ) {
 		return make_exception("expects <integer> arguments");
 	}
-	const INT a = GET_INT(FV0);
-	const INT b = GET_INT(FV1);
+	const INT_PTR a = GET_INT(FV0);
+	const INT_PTR b = GET_INT(FV1);
 	if (b == 0) {
 		return make_exception("division by zero");
 	}
-	INT r = a % b;
+	INT_PTR r = a % b;
 	if ((a >= 0) != (b >= 0) && r != 0) {
 		r += b;
 	}
@@ -191,9 +191,9 @@ CELL func_expt(CELL frame)
     if (FLOATP(FV0) || FLOATP(FV1) || GET_INT(FV1) < 0) {
         return make_float(pow(GET_NUMBER_AS_FLOAT(FV0), GET_NUMBER_AS_FLOAT(FV1)));
     }
-    INT p = GET_INT(FV0);
-    INT e = GET_INT(FV1);
-    INT r = 1;
+    INT_PTR p = GET_INT(FV0);
+    INT_PTR e = GET_INT(FV1);
+    INT_PTR r = 1;
     for( ; e; e >>= 1) {
         if (e & 1) r *= p;
         p *= p;
@@ -242,8 +242,8 @@ CELL func_arith_ ## fn(CELL frame) \
             } \
         } \
         else { \
-            const INT a = GET_INT(lhs); \
-            const INT b = GET_INT(rhs); \
+            const INT_PTR a = GET_INT(lhs); \
+            const INT_PTR b = GET_INT(rhs); \
             if (! (a OPER b)) { \
                 return V_FALSE; \
             } \
@@ -282,10 +282,10 @@ CELL func_ ## fn(CELL frame) \
  \
     CELL result = V_EMPTY; \
     switch(t) { \
-    /* all args are INT */ \
+    /* all args are INT_PTR */ \
     case T_INT: \
         { \
-            INT i = init; \
+            INT_PTR i = init; \
             int argi = 0; \
             if (FC > 1) { \
                 const CELL arg = FV[argi++]; \
@@ -299,7 +299,7 @@ CELL func_ ## fn(CELL frame) \
         } \
         break; \
  \
-    /* args are a mixture of INT and FLOAT */ \
+    /* args are a mixture of INT_PTR and FLOAT */ \
     case T_FLOAT: \
         { \
             FLOAT f = init; \
@@ -383,7 +383,7 @@ CELL func_number2string(CELL frame)
     switch(GET_TYPE(FV0)) {
     case T_INT:
         {
-            INT a = GET_INT(FV0);
+            INT_PTR a = GET_INT(FV0);
             char* fmt;
             switch(base) {
             case 8:  fmt = a < 0 ? "-%llo" : "%llo"; a = llabs(a); break;
diff --git a/src/bitwise.c b/src/bitwise.c
index 3d747cf..da811da 100755
--- a/src/bitwise.c
+++ b/src/bitwise.c
@@ -22,15 +22,15 @@ CELL func_ ## fn(CELL frame) \
  \
     CELL result = V_EMPTY; \
     switch(t) { \
-    /* all args are INT */ \
+    /* all args are INT_PTR */ \
     case T_INT: \
         { \
             int argi = 0; \
             const CELL arg = FV[argi++]; \
-            INT i = GET_INT(arg); \
+            INT_PTR i = GET_INT(arg); \
             while(argi < FC) { \
                 const CELL arg = FV[argi++]; \
-                i = i OPER (INT)GET_INT(arg); \
+                i = i OPER (INT_PTR)GET_INT(arg); \
             } \
             result = make_int(i); \
         } \
@@ -48,8 +48,8 @@ CELL func_bitwise_not(CELL frame)
     if (!INTP(FV0)) {
         return make_exception("expects <integer> argument");
     }
-    const INT n = GET_INT(FV0);
-    const INT result = ~n;
+    const INT_PTR n = GET_INT(FV0);
+    const INT_PTR result = ~n;
 
     return make_int(result);
 }
@@ -59,10 +59,10 @@ CELL func_bitwise_merge(CELL frame)
     if (! (INTP(FV0) && INTP(FV1) && INTP(FV2)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT mask = GET_INT(FV0);
-    const INT n0 = GET_INT(FV1);
-    const INT n1 = GET_INT(FV2);
-    const INT result
+    const INT_PTR mask = GET_INT(FV0);
+    const INT_PTR n0 = GET_INT(FV1);
+    const INT_PTR n1 = GET_INT(FV2);
+    const INT_PTR result
         = (mask & n0)
         | (~mask & n1);
 
@@ -74,8 +74,8 @@ CELL func_any_bits_setp(CELL frame)
     if (! (INTP(FV0) && INTP(FV1)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT j = GET_INT(FV0);
-    const INT k = GET_INT(FV1);
+    const INT_PTR j = GET_INT(FV0);
+    const INT_PTR k = GET_INT(FV1);
 
     return MKBOOL(
         j & k
@@ -94,8 +94,8 @@ CELL func_bit_count(CELL frame)
     if (! (INTP(FV0))) {
         return make_exception("expects <integer> argument");
     }
-    INT n = GET_INT(FV0);
-    INT count = 0;
+    INT_PTR n = GET_INT(FV0);
+    INT_PTR count = 0;
     if (n < 0) {
         for( ; n < -1; n >>= 1) {
             if (! (n & 1)) ++count;
@@ -109,9 +109,9 @@ CELL func_bit_count(CELL frame)
     return make_int(count);
 }
 
-static INT internal_integer_length(INT n)
+static INT_PTR internal_integer_length(INT_PTR n)
 {
-    INT count = 0;
+    INT_PTR count = 0;
     if (n < 0) {
         ++count;
         for( ; n < -1; n >>= 1) {
@@ -132,8 +132,8 @@ CELL func_integer_length(CELL frame)
     if (! (INTP(FV0))) {
         return make_exception("expects <integer> argument");
     }
-    INT n = GET_INT(FV0);
-    const INT count = internal_integer_length(n);
+    INT_PTR n = GET_INT(FV0);
+    const INT_PTR count = internal_integer_length(n);
     return make_int(count);
 }
 
@@ -144,8 +144,8 @@ CELL func_first_set_bit(CELL frame)
     if (! (INTP(FV0))) {
         return make_exception("expects <integer> argument");
     }
-    INT n = GET_INT(FV0);
-    INT count = 0;
+    INT_PTR n = GET_INT(FV0);
+    INT_PTR count = 0;
     for( ; !(n & 1); n >>= 1) {
         ++count;
     }
@@ -160,8 +160,8 @@ CELL func_bit_setp(CELL frame)
     if (! (INTP(FV0) && INTP(FV1)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT index = GET_INT(FV0);
-    const INT n = GET_INT(FV1);
+    const INT_PTR index = GET_INT(FV0);
+    const INT_PTR n = GET_INT(FV1);
 
     return MKBOOL(
         n & 1LL << index
@@ -173,10 +173,10 @@ CELL func_copy_bit(CELL frame)
     if (! (INTP(FV0) && INTP(FV1) && BOOLP(FV2)) ) {
         return make_exception("expects <integer>, <integer>, <bool> arguments");
     }
-    const INT index = GET_INT(FV0);
-    const INT from = GET_INT(FV1);
-    const INT bit = GET_BOOL(FV2);
-    const INT result = 
+    const INT_PTR index = GET_INT(FV0);
+    const INT_PTR from = GET_INT(FV1);
+    const INT_PTR bit = GET_BOOL(FV2);
+    const INT_PTR result =
         bit ? from | 1LL << index
             : from & ~(1LL << index);
 
@@ -191,10 +191,10 @@ CELL func_bit_field(CELL frame)
     if ( !(INTP(FV0) && INTP(FV1) && INTP(FV2)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT n = GET_INT(FV0);
-    const INT start = GET_INT(FV1);
-    const INT end = GET_INT(FV2);
-    const INT result
+    const INT_PTR n = GET_INT(FV0);
+    const INT_PTR start = GET_INT(FV1);
+    const INT_PTR end = GET_INT(FV2);
+    const INT_PTR result
         = n >> start
         & ((1LL << (end-start)) - 1);
 
@@ -206,11 +206,11 @@ CELL func_copy_bit_field(CELL frame)
     if ( !(INTP(FV0) && INTP(FV1) && INTP(FV2) && INTP(FV3)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT to = GET_INT(FV0);
-    const INT from = GET_INT(FV1);
-    const INT start = GET_INT(FV2);
-    const INT end = GET_INT(FV3);
-    const INT result
+    const INT_PTR to = GET_INT(FV0);
+    const INT_PTR from = GET_INT(FV1);
+    const INT_PTR start = GET_INT(FV2);
+    const INT_PTR end = GET_INT(FV3);
+    const INT_PTR result
         = (to & ~((1LL << end) - (1LL << start)))
         | ((from & ((1LL << (end-start)) - 1)) << start);
 
@@ -222,9 +222,9 @@ CELL func_arithmetic_shift(CELL frame)
     if (!INTP(FV0) && INTP(FV1)) {
         return make_exception("expects <integer> arguments");
     }
-    const INT n = GET_INT(FV0);
-    const INT count = GET_INT(FV1);
-    const INT result = 
+    const INT_PTR n = GET_INT(FV0);
+    const INT_PTR count = GET_INT(FV1);
+    const INT_PTR result =
         (count > 0) ? n << count
                     : n >> -count;
 
@@ -236,10 +236,10 @@ CELL func_rotate_bit_field(CELL frame)
     if ( !(INTP(FV0) && INTP(FV1) && INTP(FV2) && INTP(FV3)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT n = GET_INT(FV0);
-    INT count = GET_INT(FV1);
-    const INT start = GET_INT(FV2);
-    const INT end = GET_INT(FV3);
+    const INT_PTR n = GET_INT(FV0);
+    INT_PTR count = GET_INT(FV1);
+    const INT_PTR start = GET_INT(FV2);
+    const INT_PTR end = GET_INT(FV3);
 
     if (count == 0) {
         return FV0;
@@ -249,10 +249,10 @@ CELL func_rotate_bit_field(CELL frame)
     }
 
     // FIXME - I'm sure this could be simplified to use fewer shifts
-    INT seg = (n >> start) & ((1LL << (end-start)) - 1);
+    INT_PTR seg = (n >> start) & ((1LL << (end-start)) - 1);
     seg = ((seg << count) & ((1LL << (end-start)) - 1))
         | ((seg >> (end-start - count)));
-    const INT result
+    const INT_PTR result
         = (n & ~((1LL << end) - (1LL << start)))
         | (seg << start);
 
@@ -264,19 +264,19 @@ CELL func_reverse_bit_field(CELL frame)
     if ( !(INTP(FV0) && INTP(FV1) && INTP(FV2)) ) {
         return make_exception("expects <integer> arguments");
     }
-    const INT n = GET_INT(FV0);
-    const INT start = GET_INT(FV1);
-    const INT end = GET_INT(FV2);
+    const INT_PTR n = GET_INT(FV0);
+    const INT_PTR start = GET_INT(FV1);
+    const INT_PTR end = GET_INT(FV2);
 
-    INT seg = (n >> start) & ((1LL << (end-start)) - 1);
-    INT newseg = 0;
-    INT i;
+    INT_PTR seg = (n >> start) & ((1LL << (end-start)) - 1);
+    INT_PTR newseg = 0;
+    INT_PTR i;
     for(i = start; i < end; ++i) {
         newseg = (newseg << 1) | (seg & 1);
         seg >>= 1;
     }
 
-    const INT result 
+    const INT_PTR result 
         = (n & ((1LL << end) - (1LL << start)))
         | (newseg << start);
 
@@ -293,8 +293,8 @@ CELL func_integer2list(CELL frame)
     if ( !(INTP(FV0) && (FC==1 || INTP(FV1)))) {
         return make_exception("expects <integer> arguments");
     }
-    INT n = GET_INT(FV0);
-    INT len = (FC==2) ? GET_INT(FV1) : internal_integer_length(n);
+    INT_PTR n = GET_INT(FV0);
+    INT_PTR len = (FC==2) ? GET_INT(FV1) : internal_integer_length(n);
 
     CELL res = V_NULL;
     for( ; len > 0; --len) {
@@ -309,7 +309,7 @@ CELL func_integer2list(CELL frame)
 CELL func_list2integer(CELL frame)
 {
     CELL lis = FV0;
-    INT n = 0;
+    INT_PTR n = 0;
     for(; CONSP(lis); lis = CDR(lis)) {
         const CELL bit = CAR(lis);
         if (!BOOLP(bit)) {
@@ -323,7 +323,7 @@ CELL func_list2integer(CELL frame)
 // Returns the integer coded by the bool1 ... arguments.
 CELL func_booleans2integer(CELL frame)
 {
-    INT n = 0;
+    INT_PTR n = 0;
     int argi;
     for(argi = 0; argi < FC; ++argi) {
         const CELL bit = FV[argi];
diff --git a/src/gc.c b/src/gc.c
index c11747c..6132719 100755
--- a/src/gc.c
+++ b/src/gc.c
@@ -7,7 +7,12 @@
 #endif
 #include <assert.h>
 #include <sys/time.h>
+#ifdef HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
+#ifndef __MINGW32__
 #include <sys/resource.h>
+#endif
 #include <math.h>
 #if defined(__MACH__)
 #  include <mach/mach_time.h>
@@ -259,8 +264,10 @@ void gc_init(size_t extent)
 	gc_other_start = gc_other_next = aligned_space1 + gc_extent;
 	gc_other_end = gc_other_start + gc_extent;
 
+#ifndef __MINGW32__
     struct rusage ru;
     getrusage(RUSAGE_SELF, &ru);
+#endif
 #if defined(__MACH__)
     uint64_t mach_t0 = mach_absolute_time();
     time_stats_init(&gc_user_time,   rusage_utime_secs(ru));
@@ -565,13 +572,13 @@ void gc_check_cell(CELL* cell, const char* label)
 {
 	char* syndrome = "";
 	if (!gc_check_cell_info(cell, &syndrome)) {
-		printf("[%08x] %08x (%s) - %s\n", (int)cell, (int)*cell, label, syndrome);
-		printf("gc_start       = %08x\n", (int)gc_start);
-		printf("gc_next        = %08x\n", (int)gc_next);
-		printf("gc_end         = %08x\n", (int)gc_end);
-		printf("gc_other_start = %08x\n", (int)gc_other_start);
-		printf("gc_other_next  = %08x\n", (int)gc_other_next);
-		printf("gc_other_end   = %08x\n", (int)gc_other_end);
+		printf("[%08" PRIxPTR "] %08" PRIxPTR " (%s) - %s\n", (uintptr_t)cell, (uintptr_t)*cell, label, syndrome);
+		printf("gc_start       = %08" PRIxPTR "\n", (uintptr_t)gc_start);
+		printf("gc_next        = %08" PRIxPTR "\n", (uintptr_t)gc_next);
+		printf("gc_end         = %08" PRIxPTR "\n", (uintptr_t)gc_end);
+		printf("gc_other_start = %08" PRIxPTR "\n", (uintptr_t)gc_other_start);
+		printf("gc_other_next  = %08" PRIxPTR "\n", (uintptr_t)gc_other_next);
+		printf("gc_other_end   = %08" PRIxPTR "\n", (uintptr_t)gc_other_end);
 		gc_die("");
 	}
 }
@@ -733,8 +740,10 @@ void gc_collect()
 {
     printf("\nGARBAGE COLLECTING...\n");
 
+#ifndef __MINGW32__
     struct rusage rusage_start_gc, rusage_end_gc;
     getrusage(RUSAGE_SELF, &rusage_start_gc);
+#endif
 
 #if defined(__MACH__)
     uint64_t mach_start_gc, mach_end_gc;
@@ -790,13 +799,17 @@ void gc_collect()
 
     gc_running = 0;
 
+#ifndef __MINGW32__
     getrusage(RUSAGE_SELF, &rusage_end_gc);
+#endif
 #if defined(__MACH__)
     mach_end_gc = mach_absolute_time();
 #endif
 
+#ifndef __MINGW32__
     time_stats_update(&gc_user_time,   rusage_utime_secs(rusage_start_gc), rusage_utime_secs(rusage_end_gc));
     time_stats_update(&gc_system_time, rusage_stime_secs(rusage_start_gc), rusage_stime_secs(rusage_end_gc));
+#endif
 #if defined(__MACH__)
     time_stats_update(&gc_mach_time,   mach_time_to_secs(mach_start_gc), mach_time_to_secs(mach_end_gc));
 #endif
diff --git a/src/main.c b/src/main.c
index a0828a8..0e51204 100755
--- a/src/main.c
+++ b/src/main.c
@@ -52,8 +52,51 @@ CELL register_inline(char* name, LABEL receiver, int min_args, int max_args)
 	return result;
 }
 
+#ifdef __MINGW32__
+const char *internal_module_path(void)
+{
+	static char buf[1024] = "";
+	uint32_t size = GetModuleFileNameA(NULL, buf, sizeof(buf));
+	if(size == sizeof(buf) || size == 0) return NULL;
+	PathRemoveFileSpecA(buf);
+	return buf;
+}
+
+char *make_startup_path(void)
+{
+	const char *module_path = internal_module_path();
+	if(module_path == NULL) return NULL;
+	static const char rel[] = "/../share/wisp/startup.wisp";
+	size_t len = strlen(module_path)+sizeof(rel)+1;
+	char *newstr = malloc(len);
+	strcpy(newstr, module_path);
+	strcat(newstr, rel);
+	return newstr;
+}
+
+CELL func_module_path(CELL frame)
+{
+	char *path = internal_module_path();
+	if(path == NULL) return make_exception("unable to get module filename.");
+	CELL module_path = make_string(path);
+	return module_path;
+}
+
+CELL func_path_relative(CELL frame)
+{
+	if (!STRINGP(FV0)) {
+		return make_exception("expects string");
+	}
+	return MKBOOL(PathIsRelativeA(GET_STRING(FV0)->data));
+}
+#endif
+
 void core_register_symbols()
 {
+#ifdef __MINGW32__
+	register_func("module-path", func_module_path, 0, 0);
+	register_func("path-relative?", func_path_relative, 1, 1);
+#endif
 }
 
 extern void compile_register_symbols();
@@ -277,7 +320,18 @@ int main(int argc, char* argv[])
 	register_symbols();
 
 	if (opt_load_libs) {
+#ifdef __MINGW32__
+		const char *startup_path = make_startup_path();
+		if(startup_path == NULL) {
+			printf("unable to get module filename.");
+			free(startup_path);
+			exit(1);
+		}
+		const CELL value = internal_load(startup_path);
+		free(startup_path);
+#else
 		const CELL value = internal_load("lib/startup.wisp");
+#endif
 		if (EXCEPTIONP(value)) {
 			print_result(value);
 			exit(1);
diff --git a/src/read.c b/src/read.c
index ea2f299..a00747d 100755
--- a/src/read.c
+++ b/src/read.c
@@ -239,7 +239,7 @@ CELL internal_read_number(RCHAN* rchan, int base, int ch, TYPEID want_type)
 		return make_float((FLOAT)strtod(token, 0));
 	}
 	else {
-        INT i = strtoll(token, 0, base ? base : 10);
+        INT_PTR i = strtoll(token, 0, base ? base : 10);
         return make_int(i);
 	}
 }
diff --git a/src/stack.c b/src/stack.c
index 54bab44..ad39c9d 100755
--- a/src/stack.c
+++ b/src/stack.c
@@ -60,13 +60,13 @@ CELL func_stack_frame_ref(CELL frame)
         return make_exception("expects <stack-frame>, <integer>");
     }
     STACK_FRAME* p = GET_STACK_FRAME(FV0);
-    const INT i = GET_INT(FV1);
+    const INT_PTR i = GET_INT(FV1);
     if (i < 0 || i >= p->len) {
         return make_exception("offset not in range [0, %d]", p->len-1);
     }
     const unsigned char bitmask = label_info[p->pc].bitmask;
     const CELL v = p->cells[i];
-    return (bitmask & (1 << i)) ? v : make_int((INT) v);
+    return (bitmask & (1 << i)) ? v : make_int((INT_PTR) v);
 }
 
 void stack_register_symbols()
diff --git a/src/wisp.h b/src/wisp.h
index 05b4d69..fc36742 100755
--- a/src/wisp.h
+++ b/src/wisp.h
@@ -2,7 +2,13 @@
 #include <config.h>
 #endif
 
+#ifndef __MINGW32__
 #include <unistd.h>
+#endif
+#ifdef __MINGW32__
+#include <windows.h>
+#include <shlwapi.h>
+#endif
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
@@ -24,10 +30,10 @@ typedef struct struct_LABEL_INFO {
 	LABEL direct;
 } LABEL_INFO;
 
-typedef unsigned char BOOL;
+// typedef unsigned char BOOL;
 typedef char CHAR;
-typedef long long INT;
-typedef double FLOAT;
+// typedef long long INT;
+// typedef double FLOAT;
 typedef unsigned int SLOT;
 
 union union_blob;
@@ -237,7 +243,7 @@ extern CELL V_EOF;
 extern void die(char* msg) __attribute__((noreturn));
 extern CELL make_cons(CELL car, CELL cdr);
 extern CELL make_char(CHAR ch);
-extern CELL make_int(INT i);
+extern CELL make_int(INT_PTR i);
 extern CELL make_float(FLOAT f);
 extern CELL make_func(char *name, void *entry, LABEL receiver, int min_args, int max_args);
 extern CELL make_string_raw(size_t k);
@@ -377,9 +383,9 @@ typedef uintptr_t LITERAL;
 	) \
 )
 
-#define GET_BOOL(cell) ((BOOL)((AS_LITERAL(cell) & LITERAL_BOOL_MASK) >> LITERAL_VALUE_SHIFT))
+#define GET_BOOL(cell) ((_Bool)((AS_LITERAL(cell) & LITERAL_BOOL_MASK) >> LITERAL_VALUE_SHIFT))
 #define GET_CHAR(cell) ((CHAR)((AS_LITERAL(cell) & LITERAL_CHAR_MASK) >> LITERAL_VALUE_SHIFT))
-#define GET_INT(cell)  (((INT)(AS_LITERAL(cell) & LITERAL_INT_MASK)) >> LITERAL_VALUE_SHIFT)
+#define GET_INT(cell)  (((INT_PTR)(AS_LITERAL(cell) & LITERAL_INT_MASK)) >> LITERAL_VALUE_SHIFT)
 #define GET_SLOT(cell) ((SLOT)((AS_LITERAL(cell) & LITERAL_SLOT_MASK) >> LITERAL_VALUE_SHIFT))
 
 #define GET_FLOAT(cell)     ((cell)->v_float.value)
