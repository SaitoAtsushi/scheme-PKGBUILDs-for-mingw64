diff -r -u schemik-1.2.40.0.org/config.h schemik-1.2.40.0/config.h
--- schemik-1.2.40.0.org/config.h	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/config.h	2021-03-02 01:15:16.675790900 +0900
@@ -1,6 +1,7 @@
 #ifndef CONFIG_H
 #define CONFIG_H
 
+#define GC_DONT_INCLUDE_WINDOWS_H
 #define DUMP_TEXT	1
 #define DUMP_LATEX	2
 
diff -r -u schemik-1.2.40.0.org/env.c schemik-1.2.40.0/env.c
--- schemik-1.2.40.0.org/env.c	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/env.c	2021-03-02 01:34:11.368767000 +0900
@@ -79,6 +79,8 @@
 
 static inline void scm_env_add_array(scm_env * env, scm_value * key, scm_value * value)
 {
+	extern void* ZeroMemory(void*, size_t);
+
 	if (env->size == env->capacity) {
 #ifndef USE_COMPACT_ENVIRONMENT
 		env->capacity += env->capacity + 1;
@@ -89,7 +91,11 @@
 		memcpy(new_bindings, env->items.list, sizeof(struct env_item) * env->capacity);
 		if (env->compact) {
 			env->compact = 0;
+#ifndef __MINGW32__
 			bzero(env->items.list, sizeof(struct env_item) * env->capacity);
+#else
+			memset(env->items.list, 0, sizeof(struct env_item) * env->capacity);
+#endif
 		}
 
 		env->capacity = new_capacity;
diff -r -u schemik-1.2.40.0.org/functions.c schemik-1.2.40.0/functions.c
--- schemik-1.2.40.0.org/functions.c	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/functions.c	2021-03-02 01:19:51.244788100 +0900
@@ -30,7 +30,9 @@
 #include <math.h>
 #include <ctype.h>
 #include <sys/types.h>
+#ifndef __MINGW32__
 #include <sys/wait.h>
+#endif
 #include <errno.h>
 
 #include "types.h"
@@ -1039,6 +1041,7 @@
 #define RETURN_STRING 	(1)
 #define RETURN_LIST	(2)
 
+#ifndef __MINGW32__
 pthread_mutex_t shell_lock;
 // (ext:shell* <result-type> <program> [ <input> <arg-1> ... <arg-n> ])
 scm_value * shell_call(SCM_ARGS)
@@ -1134,3 +1137,4 @@
 	waitpid(pid, NULL, 0);
 	return result;
 }
+#endif
diff -r -u schemik-1.2.40.0.org/functions.def schemik-1.2.40.0/functions.def
--- schemik-1.2.40.0.org/functions.def	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/functions.def	2021-03-02 01:20:39.205764500 +0900
@@ -91,6 +91,8 @@
 REGISTER_SYNC_FUNC("newline", newline, SCM_SYNC_WAIT)
 REGISTER_SYNC_FUNC("display-dbg", display_dbg, SCM_SYNC_WAIT)
 
+#ifndef __MINGW32__
 /* extensions */
 REGISTER_SYNC_FUNC("ext:shell*", shell_call, SCM_SYNC_WAIT)
 REGISTER_FUNC("ext:shell-unsync*", shell_call)
+#endif
diff -r -u schemik-1.2.40.0.org/Makefile schemik-1.2.40.0/Makefile
--- schemik-1.2.40.0.org/Makefile	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/Makefile	2021-03-02 01:53:26.115296500 +0900
@@ -4,7 +4,7 @@
 STATIC_NAME="schemik-i686-linux-static"
 
 all: stack_eval.o types.o functions.o env.o initial_env.o schemik.c rt.o int_funcs.o readline_wrapper.o config.h thread_pool.o parser.o lexer.o errors.o
-	$(CC) ${COMP_ARGS} `pkg-config --libs --cflags glib-2.0` -o schemik stack_eval.o types.o int_funcs.o functions.o env.o initial_env.o rt.o readline_wrapper.o thread_pool.o parser.o lexer.o errors.o schemik.c -lgc -lpthread -lreadline -lncurses -lm
+	$(CC) ${COMP_ARGS} `pkg-config --libs --cflags glib-2.0` -o schemik stack_eval.o types.o int_funcs.o functions.o env.o initial_env.o rt.o readline_wrapper.o thread_pool.o parser.o lexer.o errors.o schemik.c -lgc -lpthread -lreadline -lncurses -lm 
 
 stack_eval.o: stack_eval.c eval.h vm.h vm.c stack.c stack.h int_funcs.h functions.h rt.h mutex.h types.h config.h dump_vm.c tm_log.c tm_log.h constants.def
 	$(CC) ${COMP_ARGS} `pkg-config --cflags glib-2.0` -c stack_eval.c
diff -r -u schemik-1.2.40.0.org/schemik.c schemik-1.2.40.0/schemik.c
--- schemik-1.2.40.0.org/schemik.c	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/schemik.c	2021-03-02 01:41:18.614730600 +0900
@@ -75,9 +75,18 @@
 		if (code) return code;
 	}
 	
+#ifndef __MINGW32__
 	int size = readlink("/proc/self/exe", buf, READLINK_BUF_SIZE);
+#else
+	extern uint32_t GetModuleFileNameA(void*, char*, uint32_t);
+	uint32_t size = GetModuleFileNameA(NULL, buf, READLINK_BUF_SIZE);
+#endif
 	if (size) {
+#ifndef __MINGW32__
 		*strrchr(buf, '/') = '\0';
+#else
+		*strrchr(buf, '\\') = '\0';
+#endif
 		//strcat(buf, "/../share/schemik/1.2/base.scm");
 		strcat(buf, "/../share/schemik/1.2/");
 		strcat(buf, file_name);
diff -r -u schemik-1.2.40.0.org/SConstruct schemik-1.2.40.0/SConstruct
--- schemik-1.2.40.0.org/SConstruct	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/SConstruct	2021-03-01 18:48:29.829062400 +0900
@@ -34,7 +34,7 @@
 
 def requiredLib(conf, lib, header):
 	if not conf.CheckLibWithHeader(lib, header, 'c'):
-        	print 'Did not find lib' + lib + ' or ' + header + ', exiting!'
+        	print('Did not find lib' + lib + ' or ' + header + ', exiting!')
 	        Exit(1)
 
 def CheckPKGConfig(context, version):
@@ -61,11 +61,11 @@
 conf = Configure(env, custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
                                        'CheckPKG' : CheckPKG })
 if not conf.CheckPKGConfig('0.15.0'):
-	print 'pkg-config >= 0.15.0 not found.'
+	print('pkg-config >= 0.15.0 not found.')
 	Exit(1)
 
 if not conf.CheckPKG('glib-2.0 >= 2.0.0'):
-	print 'GLib-2.0 not found.'
+	print('GLib-2.0 not found.')
 	Exit(1)
 
 requiredLib(conf, 'm', 'math.h')
@@ -74,27 +74,27 @@
 requiredLib(conf, 'gc', 'gc/gc.h')
 
 if conf.CheckFunc('GC_local_malloc'):
-	print 'GC_local_malloc found, enabling explicit thread local allocation'
+	print('GC_local_malloc found, enabling explicit thread local allocation')
 #	conf.env.Append(CPPDEFINES = '-DGC_REDIRECT_TO_LOCAL')
 
 readline_support = True
 if conf.CheckLib('ncurses'):
 	if not conf.CheckLib('readline'):
-		print 'Did not find readline library. Disabling readline support.'
+		print('Did not find readline library. Disabling readline support.')
 		readline_support = False
 else:
-	print 'Did not find ncurses. Disabling readline support.'
+	print('Did not find ncurses. Disabling readline support.')
 	readline_support = False
 
 if not readline_support:
 	conf.env.Append(CPPDEFINES = '-DDISABLE_READLINE')
 else:
-	print 'Enabling readline support.'
+	print('Enabling readline support.')
 	src.append('readline_wrapper.c')
 
 
 if (platform.machine().lower() in ['sparc', 'sparc32', 'sparc64']):
-	print 'Found SPARC architecture. Enabling thread pooling.'
+	print('Found SPARC architecture. Enabling thread pooling.')
 	conf.env.Append(CPPDEFINES = '-DUSE_THREAD_POOLING')
 	env['CCFLAGS'].remove('-O2')
 	env.MergeFlags('-O3')
diff -r -u schemik-1.2.40.0.org/types.h schemik-1.2.40.0/types.h
--- schemik-1.2.40.0.org/types.h	2010-01-29 07:09:17.000000000 +0900
+++ schemik-1.2.40.0/types.h	2021-03-02 01:48:26.459223100 +0900
@@ -30,8 +30,8 @@
 	#define SCM_TYPE(x)	(x->type)
 	#define SCM_INT(x)	(x->value.integer)
 #else
-	#define SCM_TYPE(x)	((((long)(x)) & 1) ? INT : x->type)
-	#define	SCM_INT(x)	(int)((long)x >> 1)
+	#define SCM_TYPE(x)	((((intptr_t)(x)) & 1) ? INT : x->type)
+	#define	SCM_INT(x)	(intptr_t)((intptr_t)x >> 1)
 #endif
 
 
@@ -189,7 +189,7 @@
 #ifndef INTEGER_POINTER_HACK
 scm_value * scm_value_new_int(int val);
 #else
-#define scm_value_new_int(__val) ((scm_value *)(long)(1 | ((__val) << 1))) 
+#define scm_value_new_int(__val) ((scm_value *)(intptr_t)(1 | ((__val) << 1))) 
 #endif
 scm_value * scm_value_new_symbol(char * symbol);
 scm_value * scm_value_new_float(double val);
