diff -r -u ypsilon-0.9-final.org/Makefile ypsilon-0.9-final/Makefile
--- ypsilon-0.9-final.org/Makefile	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/Makefile	2022-02-05 17:54:45.432416600 +0900
@@ -265,6 +265,13 @@
   endif
 endif
 
+ifneq (,$(findstring MINGW, $(UNAME)))
+  CXX = g++
+  CXXFLAGS += -march=native -fno-omit-frame-pointer -m64
+  LDFLAGS += -static-libgcc -static-libstdc++
+  LDLIBS = -lws2_32 -lShlwapi
+endif
+
 OBJS = $(patsubst %.cpp, %.o, $(filter %.cpp, $(SRCS))) $(patsubst %.s, %.o, $(filter %.s, $(SRCS)))
 DEPS = $(patsubst %.cpp, %.d, $(filter %.cpp, $(SRCS)))
 
@@ -274,7 +281,7 @@
 	@mkdir -p -m755 $(HOME)/.ypsilon
 
 $(PROG): $(OBJS)
-	$(CXX) $(LDFLAGS) $(LDLIBS) -o $@ $^
+	$(CXX) $(LDFLAGS) -o $@ $^ $(LDLIBS)
 
 vm1.s: vm1.cpp
 	$(CXX) $(CXXFLAGS) $(CXXFLAGS_VM1) $(CPPFLAGS) \
diff -r -u ypsilon-0.9-final.org/src/file.cpp ypsilon-0.9-final/src/file.cpp
--- ypsilon-0.9-final.org/src/file.cpp	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/file.cpp	2022-02-05 17:20:31.808660800 +0900
@@ -41,7 +41,11 @@
     static const char*
     win32_lasterror_message()
     {
+#ifndef __MINGW32__
         __declspec(thread) static char* s_last_message;
+#else
+        static __thread  char* s_last_message;
+#endif
         if (s_last_message) {
             LocalFree(s_last_message);
             s_last_message = NULL;
@@ -455,7 +459,7 @@
             scm_string_t string = (scm_string_t)proc;
             name = string->name;
         }
-        return GetProcAddress((HMODULE)hdl, name);
+        return (void*)GetProcAddress((HMODULE)hdl, name);
     }
 
     const char*
diff -r -u ypsilon-0.9-final.org/src/ioerror.cpp ypsilon-0.9-final/src/ioerror.cpp
--- ypsilon-0.9-final.org/src/ioerror.cpp	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/ioerror.cpp	2022-02-05 17:52:21.281464600 +0900
@@ -11,7 +11,7 @@
 #include "ioerror.h"
 #include "arith.h"
 
-#if _MSC_VER
+#if defined(_MSC_VER) && !defined(__MINGW32__)
   #define   ETXTBSY     26
 #endif
 
diff -r -u ypsilon-0.9-final.org/src/main.cpp ypsilon-0.9-final/src/main.cpp
--- ypsilon-0.9-final.org/src/main.cpp	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/main.cpp	2022-02-05 18:07:26.401108000 +0900
@@ -12,8 +12,12 @@
 char* const* main_command_line_argv;
 
 #if _MSC_VER
+#ifndef __MINGW32__
   __declspec(thread) VM* s_current_vm;
 #else
+  __thread VM* s_current_vm;
+#endif
+#else
   #if defined(NO_TLS)
     pthread_key_t s_current_vm;
   #else
diff -r -u ypsilon-0.9-final.org/src/object.h ypsilon-0.9-final/src/object.h
--- ypsilon-0.9-final.org/src/object.h	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/object.h	2022-02-05 18:30:24.470259400 +0900
@@ -304,7 +304,11 @@
     off64_t         mark;
     int             line;
     int             column;
+#ifndef __MINGW32__
     fd_t            fd;
+#else
+    HANDLE      fd;
+#endif
     scm_obj_t       name;
     scm_obj_t       transcoder;
     uint8_t         codec;
diff -r -u ypsilon-0.9-final.org/src/port.cpp ypsilon-0.9-final/src/port.cpp
--- ypsilon-0.9-final.org/src/port.cpp	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/port.cpp	2022-02-05 17:27:18.233976000 +0900
@@ -52,8 +52,10 @@
 
 #if _MSC_VER
 
+#ifndef __MINGW32__
     #define S_IRUSR         _S_IREAD
     #define S_IWUSR         _S_IWRITE
+#endif
 
     static fd_t io_open(const char* path, int oflag, int pmode)
     {
diff -r -u ypsilon-0.9-final.org/src/subr_file.cpp ypsilon-0.9-final/src/subr_file.cpp
--- ypsilon-0.9-final.org/src/subr_file.cpp	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/subr_file.cpp	2022-02-05 17:51:14.328973900 +0900
@@ -329,7 +329,19 @@
 subr_system_share_path(VM* vm, int argc, scm_obj_t argv[])
 {
     if (argc == 0) {
+#ifdef __MINGW32__
+        char buf[PATH_MAX];
+        uint32_t size = GetModuleFileNameA(NULL, buf, sizeof(buf));
+        if (size) {
+            *strrchr(buf, '\\') = '\0';
+            strcat(buf, "../share/ypsilon");
+        } else {
+            return scm_false;
+        }
+        return make_string_literal(vm->m_heap, buf);
+#else
         return make_string_literal(vm->m_heap, SYSTEM_SHARE_PATH);
+#endif
     }
     wrong_number_of_arguments_violation(vm, "system-share-path", 0, 0, argc, argv);
     return scm_undef;
@@ -340,7 +352,19 @@
 subr_system_extension_path(VM* vm, int argc, scm_obj_t argv[])
 {
     if (argc == 0) {
+#ifdef __MINGW32__
+        char buf[PATH_MAX];
+        uint32_t size = GetModuleFileNameA(NULL, buf, sizeof(buf));
+        if (size) {
+            *strrchr(buf, '\\') = '\0';
+            strcat(buf, "../lib/ypsilon");
+        } else {
+            return scm_false;
+        }
+        return make_string_literal(vm->m_heap, buf);
+#else
         return make_string_literal(vm->m_heap, SYSTEM_EXTENSION_PATH);
+#endif
     }
     wrong_number_of_arguments_violation(vm, "system-extension-path", 0, 0, argc, argv);
     return scm_undef;
diff -r -u ypsilon-0.9-final.org/src/sysdep.h ypsilon-0.9-final/src/sysdep.h
--- ypsilon-0.9-final.org/src/sysdep.h	2022-02-01 03:56:41.000000000 +0900
+++ ypsilon-0.9-final/src/sysdep.h	2022-02-05 18:34:29.664601600 +0900
@@ -7,6 +7,11 @@
 #ifndef SYSDEP_H_INCLUDED
 #define SYSDEP_H_INCLUDED
 
+#ifdef __MINGW32__
+#define _MSC_VER 1
+#define UNICODE 1
+#endif
+
 #if defined(NO_TLS)
   #undef NO_TLS
   #define NO_TLS                    1
@@ -21,16 +26,32 @@
 #endif
 
 #if _MSC_VER
+#ifdef __MINGW32__
+  #define DECLSPEC(x)
+  #define ATTRIBUTE(x)              __attribute__ ((x))
+#else
   #define DECLSPEC(x)               __declspec(x)
   #define ATTRIBUTE(x)
+#endif
   #define ARCH_BIG_ENDIAN           0
   #define ARCH_LITTLE_ENDIAN        1
+#ifdef __x86_64__
+  #define ARCH_IA32                 0
+  #define ARCH_X64                  1
+#else
   #define ARCH_IA32                 1
   #define ARCH_X64                  0
+#endif
   #define ARCH_ARM                  0
+#if  defined(__x86_64__) && defined( __MINGW32__)
+  #define ARCH_ILP32                0
+  #define ARCH_LP64                 1
+  #define ARCH_LLP64                1
+#else
   #define ARCH_ILP32                1
   #define ARCH_LP64                 0
   #define ARCH_LLP64                0
+#endif
 #else
   #define DECLSPEC(x)
   #define ATTRIBUTE(x)              __attribute__ ((x))
@@ -116,6 +137,7 @@
     #include    <winsock2.h>
     #include    <ws2tcpip.h>
     #include    <shlwapi.h>
+    #include    <stdint.h>
 
     extern "C" void __cdecl     _dosmaperr(unsigned long);
     #define snprintf            _snprintf
@@ -127,6 +149,7 @@
     #define VALUE_NAN           std::numeric_limits<double>::quiet_NaN()
     #define VALUE_INF           std::numeric_limits<double>::infinity()
 
+#ifndef __MINGW32__
     #define INT8_MIN            _I8_MIN
     #define INT8_MAX            _I8_MAX
     #define INT16_MIN           _I16_MIN
@@ -158,6 +181,7 @@
     typedef unsigned long long  uint64_t;
     typedef int                 ssize_t;
     typedef int64_t             off64_t;
+#endif
     typedef HANDLE              fd_t;
 
     #define MEM_STORE_FENCE     _mm_sfence()
@@ -188,11 +212,85 @@
     #define HOST_NAME_MAX       255
     #endif
 
+#ifndef __MINGW32__
     inline int      isnan(double x) { return _isnan(x); }
     inline int      isinf(double x) { return (!_finite(x) && !_isnan(x)); }
+#endif
     inline double   round(double x) { return (x >= 0.0) ? floor(x + 0.5) : ceil(x - 0.5); }
     inline double   trunc(double x) { return (x >= 0.0) ? floor(x) : ceil(x); }
 
+#ifdef __MINGW32__
+  #if ARCH_LP64
+    typedef int int128_t __attribute__((__mode__(TI)));
+    typedef unsigned int uint128_t __attribute__((__mode__(TI)));
+  #endif
+#endif
+
+#ifdef __MINGW32__
+
+#include <algorithm>
+#include <utility>
+#include <iterator>
+
+inline void _dosmaperr(DWORD oserrno)
+{
+  const static std::pair<int, DWORD> errmap[] = {
+    {ERROR_INVALID_FUNCTION, EINVAL},
+    {ERROR_FILE_NOT_FOUND, ENOENT},
+    {ERROR_PATH_NOT_FOUND, ENOENT},
+    {ERROR_TOO_MANY_OPEN_FILES, EMFILE},
+    {ERROR_ACCESS_DENIED, EACCES},
+    {ERROR_ARENA_TRASHED, ENOMEM},
+    {ERROR_NOT_ENOUGH_MEMORY, ENOMEM},
+    {ERROR_INVALID_BLOCK, ENOMEM},
+    {ERROR_BAD_ENVIRONMENT, E2BIG},
+    {ERROR_BAD_FORMAT, ENOEXEC},
+    {ERROR_INVALID_ACCESS, EINVAL},
+    {ERROR_INVALID_DATA, EINVAL},
+    {ERROR_INVALID_DRIVE, ENOENT},
+    {ERROR_CURRENT_DIRECTORY, EACCES},
+    {ERROR_NOT_SAME_DEVICE, EXDEV},
+    {ERROR_NO_MORE_FILES, ENOENT},
+    {ERROR_LOCK_VIOLATION, EACCES},
+    {ERROR_BAD_NETPATH, ENOENT},
+    {ERROR_NETWORK_ACCESS_DENIED, EACCES},
+    {ERROR_BAD_NET_NAME, ENOENT},
+    {ERROR_FILE_EXISTS, EEXIST},
+    {ERROR_CANNOT_MAKE, EACCES},
+    {ERROR_FAIL_I24, EACCES},
+    {ERROR_INVALID_PARAMETER, EINVAL},
+    {ERROR_NO_PROC_SLOTS, EAGAIN},
+    {ERROR_DRIVE_LOCKED, EACCES},
+    {ERROR_BROKEN_PIPE, EPIPE},
+    {ERROR_DISK_FULL, ENOSPC} ,
+    {ERROR_INVALID_TARGET_HANDLE, EBADF},
+    {ERROR_INVALID_HANDLE, EINVAL},
+    {ERROR_WAIT_NO_CHILDREN, ECHILD},
+    {ERROR_CHILD_NOT_COMPLETE, ECHILD},
+    {ERROR_DIRECT_ACCESS_HANDLE, EBADF},
+    {ERROR_NEGATIVE_SEEK, EINVAL},
+    {ERROR_SEEK_ON_DEVICE, EACCES},
+    {ERROR_DIR_NOT_EMPTY, ENOTEMPTY},
+    {ERROR_NOT_LOCKED, EACCES},
+    {ERROR_BAD_PATHNAME, ENOENT},
+    {ERROR_MAX_THRDS_REACHED, EAGAIN},
+    {ERROR_LOCK_FAILED, EACCES},
+    {ERROR_ALREADY_EXISTS, EEXIST},
+    {ERROR_FILENAME_EXCED_RANGE, ENOENT},
+    {ERROR_NESTING_NOT_ALLOWED, EAGAIN},
+    {ERROR_NOT_ENOUGH_QUOTA, ENOMEM},
+    {ERROR_OPERATION_ABORTED, EINTR}
+  };
+
+  auto result = std::find_if(std::begin(errmap),
+                             std::end(errmap),
+                             [oserrno](std::pair<int,DWORD> errpair) {
+                               return errpair.first == oserrno;
+                             });
+  errno = result == std::end(errmap) ? EINVAL : result->second;
+}
+#endif
+
     inline double msec()
     {
         LARGE_INTEGER time;
@@ -238,15 +336,24 @@
         return VirtualFree(adrs, size, MEM_DECOMMIT);
     }
 
+#ifndef __MINGW32__
+        extern __declspec(thread) VM* s_current_vm;
+#else
+        extern __thread VM* s_current_vm;
+#endif
+
     inline VM* current_vm()
     {
-        extern __declspec(thread) VM* s_current_vm;
         return s_current_vm;
     }
 
     inline void set_current_vm(VM* vm)
     {
+#ifndef __MINGW32__
         extern __declspec(thread) VM* s_current_vm;
+#else
+        extern __thread VM* s_current_vm;
+#endif
         s_current_vm = vm;
     }
 
